#!/usr/bin/env bash

# This is automated install script for TripleO
# This file compiles commands found at ../devtest.md file
# and adds some tests and parts for better automation

# do git checkout of needed tools by default
GIT_CHECKOUT=${GIT_CHECKOUT:-1}

# function for better handling of waiting till something completes
# by Derek Higgins (https://github.com/derekhiggins)
wait_for(){
  LOOPS=$1
  SLEEPTIME=$2
  shift ; shift
  i=0
  while [ $i -lt $LOOPS ] ; do
    i=$((i + 1))
    $@ && return 0 || true
    sleep $SLEEPTIME
  done
  return 1
}

set -e

# test for existing ssh public key
SSH_KEY_LOCATION=~/.ssh
declare -a POSSIBLE_SSH_KEY_FILES=('id_rsa.pub' 'id_dsa.pub');
set +e
for key_file in "${POSSIBLE_SSH_KEY_FILES[@]}"
do
  file "$SSH_KEY_LOCATION/$key_file" | grep "public key"
  if [ "$?" == "0" ]; then
    SSH_KEY_FILE="$SSH_KEY_LOCATION/$key_file"
    break
  fi
done
set -e
if [ -z "$SSH_KEY_FILE" ]; then
    echo "There is no public key for ssh access. Please create one and run again."
    exit
fi


# TODO: test for running ssh service and open port 22

# creates tripleo root directory
export TRIPLEO_ROOT=~/tripleo

if [ ! -d "$TRIPLEO_ROOT" ]; then
  mkdir $TRIPLEO_ROOT
fi


if [ $GIT_CHECKOUT == 1 ]; then
  # inteligently clone repos (when git repo exists => pull)
  declare -a GITHUB_REPOS=('tripleo/incubator/master' 'tripleo/bm_poseur/master' 'stackforge/diskimage-builder/master' 'stackforge/tripleo-image-elements/master');
  for repo_with_commit in "${GITHUB_REPOS[@]}"
  do
    cd $TRIPLEO_ROOT
    repo=${repo_with_commit%/*}
    repo_commit=${repo_with_commit##*/}
    repo_dir=${repo##*/}
    if [ -d "$repo_dir" ]; then
      set +e
      cd $repo_dir
      git status
      if [ "$?" == "0" ]; then
        git reset HEAD --hard
        git pull
      else
        cd $TRIPLEO_ROOT
        rm -rf $repo_dir
        git clone "https://github.com/${repo}"
      fi
      set -e
    else
      git clone "https://github.com/${repo}"
    fi
    cd $TRIPLEO_ROOT
    cd $repo_dir
    git checkout $repo_commit
  done
fi

# installs dependencies on host
cd $TRIPLEO_ROOT/incubator
scripts/install-dependencies

# test for user's groups - it has to contain libvirtd
set +e
id | grep libvirtd
if [ "$?" != "0" ]; then
  echo "Please, log out and log in to be able to connect to libvirt"
  echo "and then run this script again"
  exit 1
fi
set -e

cd $TRIPLEO_ROOT/bm_poseur/

# creates bridge for network with baremetal nodes
# sometimes it just end with "libvir: XML-RPC error : Failed to connect socket to '/var/run/libvirt/libvirt-sock': No such file or directory"
# so we will wait till it works
wait_for 60 10 sudo ./bm_poseur --bridge-ip=none create-bridge

$TRIPLEO_ROOT/diskimage-builder/bin/disk-image-create -u base -a i386 -o $TRIPLEO_ROOT/incubator/base 

cd $TRIPLEO_ROOT/tripleo-image-elements/elements/boot-stack
sed -i "s/\"user\": \"stack\",/\"user\": \"`whoami`\",/" config.json

cd $TRIPLEO_ROOT/incubator/
scripts/boot-elements boot-stack -o bootstrap

BOOTSTRAP_IP=`scripts/get-vm-ip bootstrap`

# delete existing baremetal vms
sudo $TRIPLEO_ROOT/bm_poseur/bm_poseur destroy-vm

sudo $TRIPLEO_ROOT/bm_poseur/bm_poseur --vms 1 --arch i686 create-vm

# solution for not bugging with prompt
scp -o StrictHostKeyChecking=no root@$BOOTSTRAP_IP:stackrc ~/stackrc
sed -i "s/localhost/$BOOTSTRAP_IP/" ~/stackrc
source ~/stackrc

# add path to nova tools
export PATH=$PATH:$TRIPLEO_ROOT/scripts

# wait till all services in bootstrap node is booted
wait_for 60 30 nova keypair-add --pub-key $SSH_KEY_FILE default

# inform nova about baremetal nodes
for MAC in $($TRIPLEO_ROOT/bm_poseur/bm_poseur get-macs); do
  nova baremetal-node-create ubuntu 1 512 10 $MAC
  nova baremetal-interface-add $id $MAC
  sleep 5
done 

# Wait for the following to show up in the nova-compute log on the bootstrap node

# FIXME: temporary solution for waiting 
sleep 60s

# 2013-01-08 16:43:13 AUDIT nova.compute.resource_tracker [-] Auditing locally available compute resources
# 2013-01-08 16:43:13 DEBUG nova.compute.resource_tracker [-] Hypervisor: free ram (MB): 512 from (pid=24853) _report_hypervisor_resource_view /opt/stack/nova/nova/compute/resource_tracker.py:327
# 2013-01-08 16:43:13 DEBUG nova.compute.resource_tracker [-] Hypervisor: free disk (GB): 0 from (pid=24853) _report_hypervisor_resource_view /opt/stack/nova/nova/compute/resource_tracker.py:328
# 2013-01-08 16:43:13 DEBUG nova.compute.resource_tracker [-] Hypervisor: free VCPUs: 1 from (pid=24853) _report_hypervisor_resource_view /opt/stack/nova/nova/compute/resource_tracker.py:333
# 2013-01-08 16:43:13 AUDIT nova.compute.resource_tracker [-] Free ram (MB): 0
# 2013-01-08 16:43:13 AUDIT nova.compute.resource_tracker [-] Free disk (GB): 0
# 2013-01-08 16:43:13 AUDIT nova.compute.resource_tracker [-] Free VCPUS: 1

# create base image - this will be installed on each node by nova baremetal
$TRIPLEO_ROOT/diskimage-builder/bin/disk-image-create -u ubuntu -a i386 -o base

# load the base image into the Glance
cd $TRIPLEO_ROOT/incubator/
scripts/load-image base.qcow2

ssh root@$BOOTSTRAP_IP "cat /opt/stack/boot-stack/virtual-power-key.pub" >> ~/.ssh/authorized_keys

nova boot --flavor baremetal --image base --key_name default bmtest

